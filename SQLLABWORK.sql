
--I'LL TRY TO MAKE THIS ABLE TO GO AS ONE SCRIPT AS I APPRECIETED IT WHEN I COULD DO THAT.
--SORRY IF IT DON'T WORK, EH?

--2.1 SELECT ALL FROM EMPLOYEE, ONLY WNEH LAST NAME = KING, ONLY FIRST NAME = ANDREW & REPORTSTO = NULL
SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';
SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;
/

--2.2 SELECT FROM TABLE AND SORT BY, ALBUM & TITLE, CUSTORMER & CITY
SELECT * FROM ALBUM ORDER BY TITLE ASC;
SELECT * FROM CUSTOMER ORDER BY CITY DESC;
/

--2.3 INSERT INTO TABLE, GENRE, EMPLOYEE, CUSTOMER
INSERT INTO GENRE VALUES (26, 'Vaporwave');
INSERT INTO GENRE VALUES (27, 'Funk');
/
INSERT ALL 
INTO EMPLOYEE VALUES (9, 'Marat', 'Jean-Paul', 'Bather', NULL, NULL, NULL, NULL, 'Paris', 'IdF', 'France', NULL, NULL, NULL, NULL)
INTO EMPLOYEE VALUES (10, 'the Cynic', 'Diogenes', 'Dog', NULL, NULL, NULL, NULL, 'Cosmos', 'Cosmos', 'Cosmos', NULL, NULL, NULL, NULL)
SELECT * FROM DUAL;
/
INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL, SUPPORTREPID)
VALUES (60, 'Henri', 'de Balzac', 'stewartbengardner@gmail.com', 3);
/
INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL, SUPPORTREPID)
VALUES (61, 'Victor', 'Hugo', 'fakey@fake.fakester', 3);
/
UPDATE CUSTOMER SET EMAIL = 'baloney@mincemeat.longpork'
--HEHE LONGPORK IS HOW CANNIBALS TALK ABOUT HUMAN MEAT WITHOUT AROUSING SUSPICION
--ANYONE COULD BE A MONSTER, GOT TO KEEP MY EYES OPEN
--NEVER KNOW, NEVER FULLY TRUST ANYONE.
WHERE CUSTOMERID = 60;
/

--2.4 UPDATE WRONG TO RIGHT FROM TABLE, AARON MITCHELL ROBART WALTER CUSTOMER, CREEDENCE CLEARWATER REVIVAL CCR ARTIST
UPDATE CUSTOMER SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';
/
UPDATE ARTIST SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';
/

--2.5 SELECT ALL INVOICES W/ BILLING ADDRESS LIKE "T%"
SELECT * FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';
/

--2.6 SELECT THING FROM TABLE CONDITION, INVOICES INVOICE TOTAL BTWN 15-30, EMPLOYEEID EMPLOYEE HIRED BTWN JUN12003-MAR12004
SELECT * FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 30;
/
SELECT EMPLOYEEID FROM EMPLOYEE
WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04';
/

--2.7 DELETE FROM CUSTOMER WHERE NAME IS ROBERT WALTER, MIGHT BE CONSTRAINTS
--I SWITCHED UP HOW THE CONSTRAINTS WORK
ALTER TABLE INVOICE
DROP CONSTRAINT FK_INVOICECUSTOMERID;
/
ALTER TABLE INVOICE
ADD CONSTRAINT FK_INVOICECUSTOMERID_CASCADE
FOREIGN KEY (CUSTOMERID) REFERENCES CUSTOMER ON DELETE CASCADE;
/
ALTER TABLE INVOICELINE
DROP CONSTRAINT FK_INVOICELINEINVOICEID;
/
ALTER TABLE INVOICELINE
ADD CONSTRAINT FK_INVOICELINEINVOICEID_CSD
FOREIGN KEY (INVOICEID) REFERENCES INVOICE ON DELETE CASCADE;
/
DELETE FROM CUSTOMER
WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';
/

--3.1 CREATE A FUNCTION THAT, RETURNS CURRENT TIME, RETURNS LENGTH OF MEDIATYPE NAME
SELECT CURRENT_TIMESTAMP FROM DUAL;
--I'M NOT SURE IF THIS IS WHAT I'M SUPPOSED TO DO, THE W3 SCHOOL HAS NO FROM IN THEIR EXAMPLE
--BUT IN MINE IT KEPT ASKING FOR IT SO I JUST USED THE DUMMY
/
SELECT LENGTH(NAME) FROM MEDIATYPE;
/

--3.2 FUNCTION THAT, RETURNS AVGTOTAL INVOICE, RETURNS MOST EXPENSIVE TRACK
SELECT AVG(TOTAL) FROM INVOICE;
/
SELECT MAX(UNITPRICE) FROM TRACK;
/

--3.3 FUNCTION THAT RETURNS AVG PRICE OF INVOICELINE FROM INVOICELINE
SELECT AVG(UNITPRICE) AS AVGPRICE FROM INVOICELINE;
/

--3.4 FUNCTION FOR EMPLOYEES YOUNGER THAN 50
SELECT * FROM EMPLOYEE
WHERE BIRTHDATE > DATE '1968-12-10';
/

--4.1 CREATE A STORED PROCEDURE THAT SELECTS THE FIRST AND LAST NAMES FROM EMPLOYES
CREATE OR REPLACE PROCEDURE SP_SELECT_EMPLOYEE_NAME(EID IN NUMBER)
IS
FIRSTNAME VARCHAR2(30);
LASTNAME VARCHAR2(30);
BEGIN
    SELECT FIRSTNAME, LASTNAME
    FROM EMPLOYEE
    WHERE EMPLOYEEID = EID;
END;
/

--4.2 STORED PROCEDURE THAT, UPDATE EMPLOYEE INFO, RETURN MANAGER OF EMPLOYEE
CREATE OR REPLACE PROCEDURE SP_UPDATE_EMLOYEE
(E_ID_TO_CHANGE IN NUMBER, E_ID IN NUMBER, E_LAST IN VARCHAR2, E_FIRST IN  VARCHAR2, E_TITLE IN VARCHAR2,
E_REPORTS IN NUMBER, E_BIRTHDATE IN DATE, E_HIREDATE IN DATE, E_ADDRESS IN VARCHAR2, E_CITY IN VARCHAR2,
E_STATE IN VARCHAR2, E_COUNTRY IN VARCHAR2, E_POSTAL_CODE IN VARCHAR2, E_PHONE IN VARCHAR2, E_FAX IN VARCHAR2, E_EMAIL IN VARCHAR2)
IS
BEGIN
    UPDATE EMPLOYEE
    SET EMPLOYEEID=E_ID, LASTNAME=E_LAST, FIRSTNAME=E_FIRST, TITLE=E_TITLE, REPORTSTO=E_REPORTS, BIRTHDATE=E_BIRTHDATE, HIREDATE=E_HIREDATE,
        ADDRESS=E_ADDRESS, CITY=E_CITY, STATE=E_STATE, COUNTRY=E_COUNTRY, POSTALCODE=E_POSTAL_CODE, PHONE=E_PHONE, FAX=E_FAX, EMAIL=E_EMAIL
    WHERE EMPLOYEEID = E_ID_TO_CHANGE;
END;
/
CREATE OR REPLACE PROCEDURE SP_GET_MANAGER(EID IN NUMBER, MID OUT NUMBER)
IS
EID NUMBER;
MID NUMBER;
BEGIN
    SELECT REPOSRTSTO FROM EMPLOYEE WHERE EMPLOYEEID = EID;
END;
/

--4.3 CREATE PROCEDURE THAT RETURNS THE NAME AND COMPANY OF A CUSTOMER
CREATE OR REPLACE PROCEDURE SP_GET_INFO(FIRSTNAME OUT, LASTNAME OUT, COMPANY OUT)
IS
FIRSTNAME VARCHAR2(30);
LASTNAME VARCHAR2(30);
COMAPNY VARCHAR2(30);
BEGIN
    SELECT FIRSTNAME, LASTNAME, COMPANY FROM CUSTOMER;
END;
/

--5.0 TRANSACTION, GIVEN INVOICEID DELETE THE INVOICE
CREATE OR REPLACE PROCEDURE SP_DELETE(IID IN)
IS
IID NUMBER;
BEGIN
    DELETE FROM INVOICE WHERE INVOICEID = IID;
END;
/

--6.1 TRIGGER ON TABLE CONDITION, AFTER-INSERT EMPLOYEE NEW INSERT, AFTER-UPDATE ALBUM NEW ROW, AFTER-DELETE CUSTOMER DELETED ROW 
CREATE OR REPLACE TRIGGER TREMPLOYEEINSERT
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('IT DID THE THING');
END;
/
CREATE OR REPLACE TRIGGER TRALBUMUPDATE
AFTER UPDATE ON ALBUM
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('IT DID THE THING AGAIN');
END;
/
CREATE OR REPLACE TRIGGER TRCUSTOMER
AFTER DELETE ON CUSTOMER
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('IT DID THE THING ONCE MORE');
END;
/

--7.1 INNER JOIN CUSTOMER + INVOICE ONLY INVOICEID AND CUSTOMER NAME
SELECT FIRSTNAME, LASTNAME, INVOICEID
FROM CUSTOMER C 
INNER JOIN INVOICE ON C.CUSTOMERID = INVOICE.CUSTOMERID;
/

--7.2 FULL JOIN CUSTOMER + INVOICE ONLY CUSTOMERID FIRSTNAME LASTNAME INVOICEID AND TOTAL
SELECT INVOICEID, TOTAL, FIRSTNAME, LASTNAME, C.CUSTOMERID
FROM CUSTOMER C
FULL JOIN INVOICE ON C.CUSTOMERID = INVOICE.CUSTOMERID;
/

--7.3 RIGHT JOIN ALBUM + ARTIST W/ ARTISTNAME AND ALBUMTITLE
SELECT NAME, A.TITLE
FROM ALBUM A
RIGHT JOIN ARTIST ON A.ARTISTID = ARTIST.ARTISTID;
/

--7.4 CROSS JOIN ALBUM + ARTIST SORT BY ARTIST NAME IN ASC ORDER
SELECT *
FROM ARTIST A
CROSS JOIN ALBUM WHERE A.ARTISTID = ALBUM.ARTISTID
ORDER BY A.NAME ASC;
/

--7.5 SELF JOIN EMPLOYEE ON REPORTSTO
SELECT E.FIRSTNAME, E.LASTNAME, E.TITLE, E.EMPLOYEEID, E.REPORTSTO, F.EMPLOYEEID, F.FIRSTNAME, F.LASTNAME, F.TITLE
FROM EMPLOYEE E, EMPLOYEE F
WHERE E.REPORTSTO = F.EMPLOYEEID;




