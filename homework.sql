SELECT * FROM EMPLOYEE; --2.1
SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';
SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO is NULL;
SELECT * FROM ALBUM ORDER BY TITLE DESC; --2.2
SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY ASC;
INSERT INTO GENRE (GENREID,NAME) VALUES ('26', 'LOVESONGS');--2.3
INSERT INTO GENRE (GENREID,NAME) VALUES ('27', 'ANIMEMUSIC');
INSERT INTO EMPLOYEE (EMPLOYEEID,LASTNAME,FIRSTNAME) VALUES ('12','BOBBERSON','BOB');
INSERT INTO CUSTOMER (CUSTOMERID,LASTNAME,FIRSTNAME,EMAIL) VALUES ('69','BILLYSON','BILLY','BILLYBOY@GMAIL.COM');
UPDATE CUSTOMER SET LASTNAME = 'WALTER', FIRSTNAME = 'ROBERT' WHERE CUSTOMERID = '32'; --2.4
UPDATE ARTIST SET NAME = 'CCR' WHERE ARTISTID ='76'; 
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%'; --2.5
SELECT * FROM INVOICE WHERE TOTAL BETWEEN '15' AND '50';
SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN TO_DATE('01/06/2003','DD-MM-YYYY') AND TO_DATE('01/3/2004','DD-MM-YYYY');
DELETE FROM INVOICELINE WHERE INVOICEID = '245' --2.6
ALTER TABLE CUSTOMER
ADD CONSTRAINT KILLER
FOREIGN KEY(CUSTOMERID)
REFERENCES CUSTOMER (CUSTOMERID)
ON DELETE CASCADE;
DELETE FROM CUSTOMER WHERE CUSTOMERID ='32'; --2.7
DELETE FROM INVOICELINE WHERE INVOICELINEID=1860;
DELETE FROM INVOICELINE WHERE INVOICEID=34x2;
DELETE FROM INVOICELINE WHERE INVOICEID=50;
DELETE FROM INVOICELINE WHERE INVOICEID=61;
DELETE FROM INVOICELINE WHERE INVOICEID=116;
DELETE FROM INVOICELINE WHERE INVOICEID=245;
DELETE FROM INVOICELINE WHERE INVOICEID=268;
DELETE FROM INVOICELINE WHERE INVOICEID=290;
DELETE FROM CUSTOMER WHERE CUSTOMERID=32;
DELETE FROM INVOICE WHERE CUSTOMERID=32

create or replace FUNCTION DATE_THING --3.1
RETURN DATE
AS
D DATE;
BEGIN
D := CURRENT_DATE;
RETURN D;
END;
SELECT DATE_THING FROM DUAL;
--3.1b
CREATE OR REPLACE FUNCTION NAMER
RETURN VARCHAR2
AS
THING mediatype.name%TYPE;
BEGIN 
SELECT MEDIATYPE.NAME INTO THING
FROM MEDIATYPE
WHERE MEDIATYPEID = '1';
RETURN LENGTH(THING);
END;
SELECT NAMER FROM DUAL;
--3.3
CREATE OR REPLACE FUNCTION AVERAGETHING
RETURN INTEGER
AS
NUM1 INVOICE.TOTAL%TYPE;
BEGIN
SELECT AVG(INVOICE.TOTAL) INTO NUM1
FROM INVOICE;
RETURN NUM1;
END;
SELECT AVERAGETHING FROM DUAL;

CREATE OR REPLACE FUNCTION AFTERYEAR 
RETURN VARCHAR2
AS
NUM1 EMPLOYEE.BIRTHDATE%TYPE;
BEGIN
SELECT BIRTHDATE INTO NUM1
FROM EMPLOYEE WHERE BIRTHDATE >= TO_DATE('01/01/1969, MM-DD-YYYY');
RETURN NUM1;
END;

CREATE OR REPLACE PROCEDURE FIRST_LAST (FIRSTNAME IN CUSTOMER.FIRSTNAME%TYPE, LASTNAME IN CUSTOMER.LASTNAME%TYPE, WORDS OUT)
IS
S SYS_REFCURSOR;
F CUSTOMER.FIRSTNAME%TYPE;
L CUSTOMER.LASTNAME%TYPE;
WORD STRING (250);
BEGIN
OPEN S FOR
SELECT FIRSTNAME FN,LASTNAME LN FROM CUSTOMER;
LOOP
FETCH S INTO FIRSTNAME,LASTNAME;
WORD := S;
DBMS_OUTPUT.PUT_LINE(WORD);
EXIT WHEN S%NOTFOUND;
END LOOP;
CLOSE S;
END;
//4.1
CREATE OR REPLACE PROCEDURE FIRST_LASTNAME (FIRST_NAME OUT VARCHAR2, LAST_NAME OUT VARCHAR2)
IS
BEGIN
SELECT LASTNAME,FIRSTNAME INTO LAST_NAME,FIRST_NAME FROM CUSTOMER;
RETURN;
END;
--4.2
create or replace PROCEDURE EMPLOYEEUPDATE (UPDATER IN NUMBER, UPDATER2 IN VARCHAR2)
IS
BEGIN
UPDATE EMPLOYEE SET ADDRESS = UPDATER2
WHERE EMPLOYEEID = UPDATER;
END;
--4.3
create or replace PROCEDURE EMPMANAGER (FINDER OUT VARCHAR2)
IS
BEGIN
SELECT FIRSTNAME INTO FINDER FROM EMPLOYEE WHERE TITLE = 'MANAGER';
END;
--5.0
create or replace PROCEDURE DTT (DELETER IN NUMBER)
IS
BEGIN
DELETE FROM INVOICE WHERE INVOICEID = DELETER;
END;
--6.1
CREATE OR REPLACE TRIGGER AFTERTHING
AFTER INSERT ON EMPLOYEE    
BEGIN
DBMS_OUTPUT.PUT_LINE('32');
END;
--6.1B
CREATE OR REPLACE TRIGGER UPDATETHING
AFTER UPDATE ON EMPLOYEE
BEGIN
DBMS_OUTPUT.PUT_LINE('I SAY THINGS BECAUSE YOU UPDATED');
END;
CREATE OR REPLACE TRIGGER DELETEYTHING
AFTER DELETE ON CUSTOMER
BEGIN
DBMS_OUTPUT.PUT_LINE('i SAY THINGS BECAUSE YOU DELETED');
END;
--7.0
--7.1
SELECT C.LASTNAME,C.FIRSTNAME,INVOICE.INVOICEID FROM CUSTOMER C --SELECT THE AREA'S YOU WANT JOIN THEM ON A COMMON POINT GROUP BY WHAT YOU WANT TO SEE
INNER JOIN INVOICE ON C.CUSTOMERID = INVOICE.CUSTOMERID
GROUP BY C.LASTNAME,C.FIRSTNAME,INVOICE.INVOICEID;
--7.2
SELECT C.LASTNAME,C.FIRSTNAME,C.CUSTOMERID,INVOICE.INVOICEID,INVOICE.TOTAL FROM CUSTOMER C
FULL OUTER JOIN INVOICE ON C.CUSTOMERID = INVOICE.CUSTOMERID
GROUP BY C.LASTNAME,C.FIRSTNAME,C.CUSTOMERID,INVOICE.INVOICEID,INVOICE.TOTAL
--7.3
SELECT A.ARTISTID, A.NAME FROM ARTIST A
RIGHT JOIN ALBUM ON A.ARTISTID = ALBUM.ARTISTID
--7.4
SELECT *
FROM ARTIST A
CROSS JOIN ALBUM 
ORDER BY A.NAME
--7.5
SELECT A.FIRSTNAME, B.LASTNAME
FROM EMPLOYEE A, EMPLOYEE B
WHERE A.FIRSTNAME = B.FIRSTNAME;

