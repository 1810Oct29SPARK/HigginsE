--SQL Homework
--2-1
--TASK 1
--SELECT ALL COLUMNS FROM EMPLOYEE TABLE
SELECT * FROM EMPLOYEE;

--TASK 2
--SELECT ALL COLUMNS FROM LASTNAME FOR KING FROM EMPLOYEE TABLE
SELECT * FROM EMPLOYEE WHERE LASTNAME = 'KING';
--TASK 3
--SELECT ALL RECORDS FROM THE EMPLOYEE TABLE WHERE THE FIRST NAME IS ANDREW AND REPORTSTO IS FULL
SELECT * 
FROM EMPLOYEE 
WHERE (FIRSTNAME = 'ANDREW') AND (REPORTSTO = 'FULL');
--2-2
--TASK 1
--SELECT ALL ALBUMS IN ALBUM TABLE AND SORT RESULT SET IN DESCENDING ORDER BY TITLE
SELECT *
FROM ALBUMS
ORDER BY TITLE DESC;
--TASK 2
--SELECT FIRST NAME FROM CUSTOMER AND SORT RESULT SET IN ASCENDING ORDER BY CITY
SELECT *
FROM CUSTOMER
ORDER BY CITY ASC;
--2-3
--TASK 1
--INSERT 2 NEW RECORDS IN GENRE TABLE
INSERT INTO GENRE(GENREID, NAME)
VALUES(26, 'JOE');
/
INSERT INTO GENRE(GENREID, NAME)
VALUES(27, 'THEZONE');

--TASK 2
--INSERT 2 NEW RECORDS IN EMPLOYEE TABLE
INSERT INTO EMPLOYEE(EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL)
VALUES('9', 'JOHNSON', 'HERALD', 'IT GUY', '7', 15-MAY-73, 08-APR-01, '2398 WILSON AVE', 'LOS ANGELEES', 'AB', 'CANADA', 'T4A 5G8', '+1 (403)728-2938', '+1 (305)204-7193', 'HJOHNSON@MAIL.COM');
INSERT INTO EMPLOYEE(EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL)
VALUES('10', 'WILLIAMS', 'MARVIN', 'DEVELOPER', 8, 15-APR-73, 08-MAR-01, '2398 STARK AVE', 'ONTARIO', 'AB', 'CANADA', 'T7A 5G1', '+1 (403)703-2938', '+1 (305)219-7943', 'MIKEWILLMADE@MAIL.COM');
--TASK 3
--INSERT 2 NEW RECORDS IN CUSTOMER TABLE
INSERT INTO CUSTOMER(CUSTOMERID, FIRSTNAME, LASTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID)
VALUES(9, 'JOHN', 'BOB', 'IT STAFF', 7, 15-MAY-73, 23-APR-01, '2398 TRUNKS AVE', 'TORONTO', 'AB', 'CANADA', 'T4A 5G8', '+1 (403)728-2938', '+1 (305)242-9593', 'BJOHNN@MAIL.COM');
/
INSERT INTO CUSTOMER(CUSTOMERID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID)
VALUES(10, 'PROCTOR', 'MICHAEL', 'ACCOUNTANT', 8, 15-APR-73, 08-MAR-01, '1536 TREE AVE', 'ONTARIO', 'AB', 'CANADA', 'T7A 5G1', '+1 (403)703-2938', '+1 (305)219-7943', 'MVP@MAIL.COM');

--2-4
--TASK 1
--UPDATE AARON MITCHELL IN CUSTOMER TABLE TO ROBERT WALTER
UPDATE CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

--TASK 2
--UPDATE NAME OF ARTIST IN THE ARTIST TABLE "CREEDENCE CLEARWATER REVIVAL" TO "CCR"
UPDATE ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';
--2-5
--SELECT ALL INVOICES WITH A BILLING ADDRESS LIKE "T%"
SELECT * 
FROM INVOICE 
WHERE BILLINGADDRESS LIKE 'T%';
--2-6
--TASK 1
--SELECT ALL INVOICES THAT HAVE A TOTAL BETWEEN 15 AND 50
SELECT * 
FROM INVOICE 
WHERE TOTAL BETWEEN 15 AND 50;

--TASK 2
--SELECT ALL EMPLOYEE_ID HIRED BETWEEN 1ST OF JUNE 2003 AND 1ST OF MARCH 2004
SELECT EMPLOYEE_ID FROM 
--2-7
--TASK-DELETE A RECORD IN CUSTOMER TABLE WHERE THE NAME IS ROBERT WALTER (THERE MAY BE CONSTRAINTS THAT RELY ON THIS, FIND OUT HOW TO RESOLVE
ALTER TABLE CUSTOMER
DROP CONSTRAINT FK_CUSTOMERSUPPORTREPID;

ALTER TABLE CUSTOMER
  ADD CONSTRAINT FK_CUSTOMERSUPPORTREPID;
  FOREIGN KEY (SUPPORTREPID) REFERENCES EMPLOYEE(EMPLOYEEID) ON DELETE CASCADE;
  
ALTER TABLE INVOICE
DROP CONSTRAINT FK_INVOICECUSTOMERID;
/
ALTER TABLE INVOICE
ADD CONSTRAINT FK_INVOICECUSTOMERID
FOREIGN KEY (CUSTOMERID) REFERENCES CUSTOMER (CUSTOMERID) ON DELETE CASCADE;
/
ALTER TABLE INVOICELINE
DROP CONSTRAINT FK_INVOICELINEINVOICEID;
/
ALTER TABLE INVOICELINE
ADD CONSTRAINT FK_INVOICELINEINVOICEID
FOREIGN KEY (INVOICEID) REFERENCES INVOICE(INVOICEID) ON DELETE CASCADE;
/
DELETE FROM CUSTOMER WHERE FIRSTNAME = 'ROBERT' AND LASTNAME = 'WALTER';
/
--3-1
--TASK 1
--CREATE A FUNCTION THAT RETURNS THE CURRENT TIME
SELECT TO_CHAR(CURRENT_DATE, 'MM-DD-YYYY HH24:MI:SS')FROM DUAL;
--TASK 2
--CREATE A FUNCTION THAT RETURN THE LENGTH OF THE NAME IN MEDIATYPE TABLE
SELECT LENGTH(NAME) FROM MEDIATYPE;
--3-2
--TASK 1
--CREATE A FUNCTION THAT RETURNS THE AVERAGE TOTAL OF ALL INVOICES
SELECT ROUND(AVG(TOTAL),2) FROM INVOICE;
--TASK 2
--CREATE A FUNCTION THAT RETURNS THE MOST EXPENSIVE TRACK
SELECT * FROM TRACK WHERE UNITPRICE = (SELECT MAX(UNITPRICE) FROM TRACK);
--3-3
--TASK-CREATE A FUNCTION THAT RETURNS THE AVERAGE PRICE 
SELECT ROUND(AVG(UNITPRICE),2) FROM INVOICELINE;
--3-4
--TASK-CREATE A FUNCTION THAT RETURNS ALL EMPLOYEES BORN AFTER 1968 
SELECT LASTNAME, FIRSTNAME FROM EMPLOYEE 
WHERE BIRTHDATE > DATE'1968-12-31';
--4-1
--TASK--CREATE A STORED PROCEDURE THAT SELECTS THE FIRST AND LAST NAMES OF ALL EMPLOYEES
CREATE OR REPLACE PROCEDURE GET_NAMES
IS
S SYS_REFCURSOR;
BEGIN
    OPEN S FOR
    SELECT LASTNAME, FIRSTNAME
    FROM EMPLOYEE
END;
--4-2
--TASK-CREATE A STORED PROCEDURE THAT UPDATES THE PERSONAL INFORMATION OF AN EMPLOYEE
CREATE OR REPLACE PROCEDURE UPDATE_EMPL_INFO(ADDRESS_N IN VARCHAR2, CITY_N IN VARCHAR2, STATE_N IN VARCHAR2, PHONE IN NUMBER) 
IS

BEGIN
    SELECT *
    FROM EMPLOYEE
    UPDATE ADDRESS,
            CITY,
            STATE,
            COUNTRY,
            PHONE,
            FAX,
            EMAIL
END;
--TASK-CREATE A STORED PROCEDURE THAT RETURNS THE MANAGERS OF AN EMPLOYEE
CREATE OR REPLACE PROCEDURE GET_MANAGERS(TITLE IN VARCHAR2, REPORTSTO IN NUMBER)
IS
E_HAS_MNGR INTEGER
BEGIN
    SELECT * EMPLOYEE
    IF E_HAS_MNGR > 0;
        RETURN REPORTSTO;
        
    ELSE 
END;
--4-3
--TASK-CREATE A STORED PROCEDURE THAT RETURNS THE NAME AND COMPANY OF A CUSTOMER
CREATE OR REPLACE GET_NAME_AND_COMPANY_FROM_CUSTOMER(FIRSTNAME IN VARCHAR2, LASTNAME IN VARCHAR2, COMPANY IN VARCHAR2)
IS

BEGIN
        
END;
--5-0
--TASK-CREATE A TRANSACTION THAT GIVEN A INVOICEID WILL DELETE THAT INVOICE(THERE MAY BE CONSTRAINTS
--THAT RELY ON THIS, FIND OUT HOW TO RESOLVE THEM)
GIVEN INVOICE_ID
DELETE INVOICE FROM INVOICE_ID
--6-1
--TASK-CREATE AN AFTER INSERT TRIGGER ON THE EMPLOYEE TABLE FIRED AFTER A NEW RECORD IS INSERTED INTO THE TABLE
CREATE OR REPLACE TRIGGER TR_INSERT_EMPLOYEE
AFTER INSERT ON EMPLOYEE
FOR EACH ROW 
WHEN(NEW.EMPLOYEEID > 0)
BEGIN
    DBMS_OUTPUT.PUT_LINE('NEW EMPLOYEE');
END;
--TASK-CREATE AN AFTER UPDATE TRIGGER ON THE ALBUM TABLE THAT FIRES AFTER A ROW IS INSERTED IN THE TABLE
CREATE OR REPLACE TRIGGER TR_INSERT_ALBUM
AFTER INSERT ON ALBUM
WHEN (NEW.ALBUMID <> OLD.ALBUMID)
BEGIN
    DBMS_OUTPUT.PUT_LINE('NEW ALBUM');
END;
--TASK-CREATE AN AFTER DELETE TRIGGER ON THE CUSTOMER TABLE THAT FIRES AFTER A ROW IS DELETED FROM THE TABLE
CREATE OR REPLACE TRIGGER TR_DELETED_CUSTOMER
AFTER DELETE ON CUSTOMER
BEGIN
    SELECT 
END
--7-1
--TASK-CREATE AN INNER JOIN THAT JOINS CUSTOMERS AND ORDERS AND SPECIFIES THE NAME OF THE CUSTOMER AND THE INVOICEID
SELECT IV.CUSTOMERID, C.FIRSTNAME, C.LASTNAME
FROM CUSTOMER C
INNER JOIN INVOICE IV ON C.CUSTOMERID = IV.CUSTOMERID;
--7-2
--TASK-CREATE AN OUTTER JOIN THAT JOINS THE CUSTOMER AND INVOICE TABLE, SPECIFYING THE CUSTOMERID, FIRSTNAME, LASTNAME,
--INVOICEID, AND TOTAL
SELECT IV.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, IV.INVOICEID, IV.TOTAL
FROM CUSTOMER C
FULL JOIN INVOICE IV ON C.CUSTOMERID = IV.CUSTOMERID;
--7-3
--TASK-CREATE A RIGHT JOIN THAT JOINS ALBUM AND ARTIST SPECIFYING ARTIST NAME AND TITLE
SELECT ATS.NAME, A.TITLE
FROM ALBUM A
RIGHT JOIN ARTIST ATS ON A.ARTISTID = ATS.ARTISTID;
--7-4
--TASK-CREATE A CROSS JOIN THAT JOINS ALBUM AND ARTIST AND SORTS BY ARTIST NAME IN ASCENDING ORDER
SELECT *
FROM ARTIST A
CROSS JOIN ALBUM
ORDER BY A.NAME ASC;
--7-5
--TASK-PERFORM A SELF-JOIN ON THE EMPLOYEE TABLE, JOINING ON THE REPORTSTO COLUMN
SELECT A.REPORTSTO, B.REPORTSTO 
FROM EMPLOYEE A, EMPLOYEE B
WHERE A.REPORTSTO <> B.REPORTSTO;



