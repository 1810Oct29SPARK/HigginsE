--SQL Homework
--2-1
--TASK 1
--SELECT ALL COLUMNS FROM EMPLOYEE TABLE
SELECT * FROM EMPLOYEE;

--TASK 2
--SELECT ALL COLUMNS FROM LASTNAME FOR KING FROM EMPLOYEE TABLE
SELECT * FROM EMPLOYEE WHERE LASTNAME = 'KING';
--TASK 3
--SELECT ALL RECORDS FROM THE EMPLOYEE TABLE WHERE THE FIRST NAME IS ANDREW AND REPORTSTO IS FULL
SELECT * FROM EMPLOYEE WHERE (FIRSTNAME = 'ANDREW') AND (REPORTSTO = 'FULL';
--2-2
--TASK 1
--SELECT ALL ALBUMS IN ALBUM TABLE AND SORT RESULT SET IN DESCENDING ORDER BY TITLE
SELECT *
FROM ALBUMS
ORDER BY TITLE DESC;
--TASK 2
--SELECT FIRST NAME FROM CUSTOMER AND SORT RESULT SET IN ASCENDING ORDER BY CITY
SELECT *
FROM CUSTOMER
ORDER BY CITY ASC;
--2-3
--TASK 1
--INSERT 2 NEW RECORDS IN GENRE TABLE
INSERT INTO GENRE(GENREID, NAME)
VALUES(26, 'JOE');
/
INSERT INTO GENRE(GENREID, NAME)
VALUES(27, 'THEZONE');

--TASK 2
--INSERT 2 NEW RECORDS IN EMPLOYEE TABLE
INSERT INTO EMPLOYEE(EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL)
VALUES(9, 'JOHNSON', 'HERALD', 'IT GUY', 7, 15-MAY-73, 08-APR-01, '2398 TRUNKS AVE', 'MIAMI', 'AB', 'CANADA', 'T4A 5G8', '+1 (403)728-2938', '+1 (305)204-7193', 'HJOHNSON@MAIL.COM');
INSERT INTO EMPLOYEE(EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL)
VALUES(10, 'PROCTOR', 'MICHAEL', 'ACCOUNTANT', 8, 15-APR-73, 08-MAR-01, '2398 TRUNKS AVE', 'ONTARIO', 'AB', 'CANADA', 'T7A 5G1', '+1 (403)703-2938', '+1 (305)219-7943', 'MVP@MAIL.COM') );
--TASK 3
--INSERT 2 NEW RECORDS IN CUSTOMER TABLE
INSERT INTO CUSTOMER(CUSTOMERID, FIRSTNAME, LASTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID)
VALUES(9, JOHNSON, HERALD, IT GUY, 7, 15-MAY-73, 08-APR-01, 2398 TRUNKS AVE, MIAMI, AB, CANADA, T4A 5G8, +1 (403)728-2938, +1 (305)204-7193, HJOHNSON@MAIL.COM);
/
INSERT INTO CUSTOMER(CUSTOMERID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID)
VALUES(10, 'PROCTOR', 'MICHAEL', 'ACCOUNTANT', 8, 15-APR-73, 08-MAR-01, '2398 TRUNKS AVE', 'ONTARIO', 'AB', 'CANADA', 'T7A 5G1', '+1 (403)703-2938', '+1 (305)219-7943', 'MVP@MAIL.COM') );

--2-4
--TASK 1
--UPDATE AARON MITCHELL IN CUSTOMER TABLE TO ROBERT WALTER
UPDATE CUSTOMER SET FIRSTNAME = 'Robert', LASTNAME = 'Walter' WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

--TASK 2
--UPDATE NAME OF ARTIST IN THE ARTIST TABLE "CREEDENCE CLEARWATER REVIVAL" TO "CCR"
UPDATE ARTIST SET NAME = 'CCR' WHERE NAME = 'Creedence Clearwater Revival';
--2-5
--SELECT ALL INVOICES WITH A BILLING ADDRESS LIKE "T%"
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE "T%";
--2-6
--TASK 1
--SELECT ALL INVOICES THAT HAVE A TOTAL BETWEEN 15 AND 50
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;

--TASK 2
--SELECT ALL EMPLOYEE_ID HIRED BETWEEN 1ST OF JUNE 2003 AND 1ST OF MARCH 2004
SELECT EMPLOYEE_ID FROM 
--2-7
--TASK-DELETE A RECORD IN CUSTOMER TABLE WHERE THE NAME IS ROBERT WALTER (THERE MAY BE CONSTRAINTS THAT RELY ON THIS, FIND OUT HOW TO RESOLVE
ALTER TABLE CUSTOMER
DROP CONSTRAINT FK_CUSTOMERSUPPORTREPID;

ALTER TABLE CUSTOMER
  ADD CONSTRAINT FK_CUSTOMERSUPPORTREPID;
  FOREIGN KEY (SUPPORTREPID) REFERENCES EMPLOYEE(EMPLOYEEID) ON DELETE CASCADE;
  
ALTER TABLE INVOICE
DROP CONSTRAINT FK_INVOICECUSTOMERID;
/
ALTER TABLE INVOICE
ADD CONSTRAINT FK_INVOICECUSTOMERID
FOREIGN KEY (CUSTOMERID) REFERENCES CUSTOMER (CUSTOMERID) ON DELETE CASCADE;
/
ALTER TABLE INVOICELINE
DROP CONSTRAINT FK_INVOICELINEINVOICEID;
/
ALTER TABLE INVOICELINE
ADD CONSTRAINT FK_INVOICELINEINVOICEID
FOREIGN KEY (INVOICEID) REFERENCES INVOICE(INVOICEID) ON DELETE CASCADE;
/
DELETE FROM CUSTOMER WHERE FIRSTNAME = 'ROBERT' AND LASTNAME = 'WALTER';
/
--3-1
--TASK 1
--CREATE A FUNCTION THAT RETURNS THE CURRENT TIME
SELECT TO_CHAR(CURRENT_DATE, 'MM-DD-YYYY HH24:MI:SS')FROM DUAL;
--TASK 2
--CREATE A FUNCTION THAT RETURN THE LENGTH OF THE NAME IN MEDIATYPE TABLE
SELECT LENGTH(NAME) FROM MEDIATYPE;
--3-2
--TASK 1
--CREATE A FUNCTION THAT RETURNS THE AVERAGE TOTAL OF ALL INVOICES
SELECT ROUND(AVG(TOTAL),2) FROM INVOICE;
--TASK 2
--CREATE A FUNCTION THAT RETURNS THE MOST EXPENSIVE TRACK
SELECT * FROM TRACK WHERE UNITPRICE = (SELECT MAX(UNITPRICE) FROM TRACK);
--3-3
--TASK-CREATE A FUNCTION THAT RETURNS THE AVERAGE PRICE 
SELECT ROUND(AVG(UNITPRICE),2) FROM INVOICELINE;
--3-4
--TASK-CREATE A FUNCTION THAT RETURNS ALL EMPLOYEES BORN AFTER 1968 
SELECT LASTNAME, FIRSTNAME FROM EMPLOYEE 
WHERE BIRTHDATE > DATE'1968-12-31';

--DAO Implementation Practice
--@Override
--	public void insertBear(int id, String name, String date, double bearWeight, int bearId, int bearTypeId)
--	{
--		try (Connection con = ConnectionUtil.getConnection(filename))
--		{
--			String sql = "INSERT INTO BEAR VALUES (?,?,?,?,?,?)";
--			PreparedStatement p = con.prepareStatement(sql);
--			p.setInt(arg0, id);
--			p.setString(2, name);
--			p.setString(3, date);
--			p.setDouble(4,  bearWeight);
--			p.setInt(5, bearId);
--			p.setInt(6,  bearTypeId);
--			p.executeUpdate(); //if we are changing anything, use executeUpdate()
--		} catch (SQLException e)
--		{
--			e.printStackTrace();
--		}
--			catch(IOException e) {
--				e.printStackTrace();
--			}
--		}
--	}
