-- 2.1
SELECT * FROM EMPLOYEE;

SELECT * FROM EMPLOYEE 
WHERE LASTNAME = 'King';

SELECT * FROM EMPLOYEE 
WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

-- 2.2
SELECT * FROM ALBUM
ORDER BY TITLE DESC;

SELECT FIRSTNAME FROM CUSTOMER
ORDER BY CITY ASC;

-- 2.3
INSERT INTO GENRE VALUES (26, 'Country');
INSERT INTO GENRE VALUES (27, 'Disney Theme Songs');

INSERT INTO EMPLOYEE VALUES (9, 'Jaeger', 'Kaleigh', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO EMPLOYEE VALUES (10, 'Trevino', 'Danny', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

INSERT INTO CUSTOMER VALUES (60, 'Kaleigh', 'Jaeger', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'kjaeger@gmail.com', NULL);
INSERT INTO CUSTOMER VALUES (61, 'Danny', 'Trevino', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'dtrev@gmail.com', NULL);

--2.4
UPDATE CUSTOMER SET LASTNAME = 'Walter'
WHERE LASTNAME = 'Mitchell';
UPDATE CUSTOMER SET FIRSTNAME = 'Robert'
WHERE FIRSTNAME = 'Aaron';

UPDATE ARTIST SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

--2.5	
SELECT * FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

--2.6
SELECT * FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 50;

SELECT EMPLOYEEID FROM EMPLOYEE
WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04';

--2.7
ALTER TABLE INVOICE
DROP CONSTRAINT FK_INVOICECUSTOMERID;
DELETE FROM CUSTOMER
WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter'; 


--3.1
SELECT CURRENT_TIMESTAMP
FROM DUAL;

SELECT LENGTH(NAME)
FROM MEDIATYPE;

--3.2
SELECT AVG(TOTAL)
FROM INVOICE;

SELECT MAX(UNITPRICE)
FROM TRACK;



--3.3
CREATE OR REPLACE FUNCTION AVG_INVOICELINE
RETURN SYS_REFCURSOR
IS
S SYS_REFCURSOR;
BEGIN
   OPEN S FOR
   SELECT AVG(UNITPRICE) FROM INVOICELINE;
   RETURN S;
END;
/
--CALL FUNCTION
DECLARE
S SYS_REFCURSOR;
N INVOICELINE.UNITPRICE%TYPE;
BEGIN
   S := AVG_INVOICELINE;
   LOOP
   FETCH S INTO N;
   EXIT WHEN S%NOTFOUND; -- BREAK OUT OF LOOP WHEN NO ROWS ARE AVAILABLE
   DBMS_OUTPUT.PUT_LINE('Average: '||N);
   END LOOP;
   CLOSE S;
END;


--3.4
--CREATE FUNCTION
CREATE OR REPLACE FUNCTION AFTER_68
RETURN SYS_REFCURSOR
IS
S SYS_REFCURSOR;
BEGIN
   OPEN S FOR
   SELECT BIRTHDATE FROM EMPLOYEE
   WHERE TO_NUMBER(BIRTHDATE) > 1968;
   RETURN S;
END;
/
--CALL FUNCTION
DECLARE
S SYS_REFCURSOR;
YOUNG_EMP EMPLOYEE.BIRTHDATE%TYPE;
BEGIN
   S := AFTER_68;
   LOOP
   FETCH S INTO YOUNG_EMP;
   EXIT WHEN S%NOTFOUND; -- BREAK OUT OF LOOP WHEN NO ROWS ARE AVAILABLE
   DBMS_OUTPUT.PUT_LINE('Employees: '||YOUNG_EMP);
   END LOOP;
   CLOSE S;
END;

--4.1
CREATE OR REPLACE PROCEDURE FIRST_LAST
IS
FIRST_LAST_NAME INTEGER;
BEGIN
SELECT COUNT (E.LASTNAME)
INTO FIRST_LAST_NAME
FROM EMPLOYEE E
WHERE E.EMPLOYEEID =1;
END;

--4.2
CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE(E_ID IN NUMBER)
AS
BEGIN
UPDATE EMPLOYEE SET FIRSTNAME='Margaret'
WHERE EMPLOYEE.EMPLOYEEID = E_ID;
END;
/
BEGIN
UPDATE_EMPLOYEE(1);
END;
/
--RETURN MANAGERS
CREATE OR REPLACE PROCEDURE MANAGER_GET(E_ID IN NUMBER, MANAGERS OUT VARCHAR2)
IS
NAMES VARCHAR2(30);
BEGIN
SELECT COUNT (E.REPORTSTO)
INTO NAMES
FROM EMPLOYEE E
WHERE E.EMPLOYEEID = E_ID;
MANAGERS := NAMES;
END;
/
DECLARE
MANAGERS VARCHAR2(30);
BEGIN
MANAGER_GET(1, MANAGERS);
END;

--4.3 
CREATE OR REPLACE PROCEDURE NAME_AND_COMPANY(CUSTOMER_NAME OUT VARCHAR2, CUSTOMER_COMPANY OUT VARCHAR2, CUSTOMER_ID IN NUMBER)
IS 
CUSTOMER_LAST VARCHAR2 (50);
CUSTOMER_FIRST VARCHAR2 (50);
COMPANY_NAME VARCHAR2 (50);
BEGIN
    SELECT C.FIRSTNAME
    INTO CUSTOMER_FIRST
    FROM CUSTOMER C
    WHERE CUSTOMER_ID = CUSTOMERID;
    SELECT C.LASTNAME
    INTO CUSTOMER_LAST
    FROM CUSTOMER C
    WHERE CUSTOMER_ID = CUSTOMERID;
    SELECT C.COMPANY 
    INTO CUSTOMER_COMPANY
    FROM CUSTOMER C
    WHERE CUSTOMER_ID = CUSTOMERID;
    CUSTOMER_NAME := CUSTOMER_FIRST + CUSTOMER_LAST;
    CUSTOMER_COMPANY := COMPANY_NAME;
END;


--5.0
CREATE OR REPLACE PROCEDURE DELETE_TRANSACTION (GIVENID NUMBER)
AS
BEGIN
    DELETE FROM INVOICE WHERE INVOICEID = GIVENID;
    COMMIT;
END;

--6.1 
INSERT INTO EMPLOYEE VALUES (11, 'Last Name', 'First Name', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

CREATE OR REPLACE TRIGGER TR_INSERT_EMPLOYEE
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('INSERT TRIGGER WORKED');
END;

INSERT INTO ALBUM VALUES (100000, NULL, NULL);
CREATE OR REPLACE TRIGGER TR_AFTER_ALBUM
AFTER INSERT ON ALBUM
FOR EACH ROW
BEGIN
    DBMS_OUTOUT.PUT_LINE('ALBUM INSERT TRIGGER WORKED');
END;

CREATE OR REPLACE TRIGGER TR_DELETE_CUSTOMER
AFTER DELETE ON CUSTOMER
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('CUSTOMER DELETE TRIGGER WORKED');
END;

--7.1 
SELECT CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID
FROM CUSTOMER
INNER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.2 
SELECT CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID, INVOICE.TOTAL
FROM CUSTOMER
FULL OUTER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.3 
SELECT ARTIST.NAME, ALBUM.TITLE
FROM ALBUM
RIGHT OUTER JOIN ARTIST ON ALBUM.ARTISTID = ARTIST.ARTISTID;

--7.4
SELECT * 
FROM ALBUM
CROSS JOIN ARTIST
ORDER BY ARTIST.NAME;

--7.5 
SELECT *
FROM EMPLOYEE A, EMPLOYEE B
WHERE A.REPORTSTO = B.REPORTSTO;
--
--DUE 5pm Monday, Dec. 10
--Upload a .sql file to your branch in exercise-submissions with answers to each task clearly marked with question number and prompt. 




